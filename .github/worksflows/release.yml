name: Build and Release Plugin

on:
  push:
    tags:
      - 'v*' # Triggers only on version tags
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up PHP and Composer
      - name: Set Up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1' # Specify the PHP version
          tools: composer # Include Composer for dependency management

      # Step 3: Install Dependencies (Generate vendor directory)
      - name: Install Dependencies
        run: composer install --no-dev --optimize-autoloader

      # Step 4: Verify vendor directory
      - name: Verify vendor Directory
        run: |
          if [ ! -d "vendor" ]; then
            echo "Error: vendor directory is missing!" >&2
            exit 1
          fi

      # Step 5: Determine the version and bump
      - name: Determine Version
        id: versioning
        run: |
          # Fetch all version tags
          git fetch --tags
          LAST_VERSION=$(git tag --list 'v*' | sort -V | tail -n 1)
          
          # Default to v1.0.0 if no version tag exists
          if [ -z "$LAST_VERSION" ]; then
            LAST_VERSION="v1.0.0"
          fi
          echo "Current version: $LAST_VERSION"
          
          # Strip the 'v' prefix and normalize to x.y.z format
          VERSION_BASE=$(echo $LAST_VERSION | sed 's/^v//')
          VERSION_BASE=$(echo $VERSION_BASE | awk -F. '{ if (NF == 1) { print $1".0.0" } else if (NF == 2) { print $1"."$2".0" } else { print $1"."$2"."$3 } }')
          echo "Normalized version: $VERSION_BASE"

          MAJOR=$(echo $VERSION_BASE | cut -d. -f1)
          MINOR=$(echo $VERSION_BASE | cut -d. -f2)
          PATCH=$(echo $VERSION_BASE | cut -d. -f3)
          
          # Increment patch version
          PATCH=$((PATCH + 1))

          # Generate new version
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Step 6: Create a new tag
      - name: Create Tag
        run: |
          if git rev-parse "refs/tags/$NEW_VERSION" >/dev/null 2>&1; then
            echo "Tag $NEW_VERSION already exists. Skipping tag creation."
          else
            echo "Creating new tag: $NEW_VERSION"
            git tag $NEW_VERSION
            git push origin $NEW_VERSION
          fi

      # Step 7: Package the plugin into a ZIP file
      - name: Create Release ZIP
        run: |
          ZIP_FILE="cloudbedrock-plugin-$NEW_VERSION.zip"
          zip -r $ZIP_FILE . -x ".git/*"
          echo "ZIP created: $ZIP_FILE"

      # Step 8: Create GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 9: Upload the release asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: cloudbedrock-plugin-${{ env.NEW_VERSION }}.zip
          asset_name: cloudbedrock-plugin-${{ env.NEW_VERSION }}.zip
          asset_content_type: application/zip
